#!/usr/bin/env bash

source $HOME/.config/backup/config

notify_backup () {
	if [ -t 0 ]; then
		echo $@
	else
		dunstify -i drive-multidisk "$@"
	fi
}

case "$1" in
	abort | cancel | end | exit | halt | int | interrupt | kill | quit | stop | term | terminate )
		if [ -s $pidfile ]; then
			kill $(cat $pidfile)
		fi
		exit 0
		;;
esac

# make sure process is not already running
if [ -e $pidfile ]; then
	if kill -0 &>1 > /dev/null $(cat $pidfile); then
		notify_backup "A backup is already running!"
		exit 1
	else
		rm $pidfile
	fi
fi
echo $$ > $pidfile

cleanup () {
	if [ $? -eq 0 ]; then
		lastline="$(tail -n 1 $logfile)"
		if [[ $lastline =~ ^rsync\ error: ]]; then
			action=$(notify_backup -u critical "Backup failed!" "$(cat $logfile | grep rsync:)" --action="log,Show log")
		else
			action=$(notify_backup "Backup finished" --action="log,Show log")
		fi
		[[ "$action" == "log" ]] && $terminal_command "tac \"$(echo $logfile)\" | less"
	fi
	rm $pidfile
	exit $?
}
interrupted () {
	kill $rsync_pid
	notify_backup "Backup cancelled"
	exit 1
}

trap cleanup EXIT
trap interrupted INT TERM SIGINT SIGTERM

notify_backup "Backup starting"
rsync -vrlptDW --del $rsync_opts --exclude-from=$excludelist $addr_src $addr_dest | tee $logfile &
rsync_pid=$!
wait
