#!/bin/bash
#
#  i3-kb-backlight
#
#  Keyboard backlight control and notifications for i3wm
#
#  Requires:
#    awk (POSIX compatible)
#    bc
#    upower
#
#  Optional:
#    A libnotify compatible notification daemon such as notify-osd or dunst
#    notify-send (libnotify) or dunstify (dunst)
#
#  Copyright (c) 2018 Beau Hastings. All rights reserved.
#  License: GNU General Public License v2
#
#  Author: Beau Hastings <beau@saweet.net>
#  URL: https://github.com/hastinbe/i3-kb-brightness

get_brightness() {
    backlight GetBrightness | awk '{print $2}'
}

get_max_brightness() {
    backlight GetMaxBrightness | awk '{print $2}'
}

set_brightness() {
    backlight SetBrightness $(clamp $1 0 $(get_max_brightness))
}

increase_brightness() {
    local step="$1"
    local current=$(get_brightness)
    local max=$(get_max_brightness)
    local new=$(min $max $(( $current + $step )) )

    set_brightness $new
}

decrease_brightness() {
    local step="$1"
    local current=$(get_brightness)
    local new=$(max 0 $(( $current - $step )) )

    set_brightness $new
}

backlight() {
    local method="$1"

    case "$method" in
        GetBrightness)
            echo $(dbus-send --type=method_call --system --print-reply=literal \
                --dest='org.freedesktop.UPower' \
                '/org/freedesktop/UPower/KbdBacklight' \
                "org.freedesktop.UPower.KbdBacklight.${method}")
            ;;
        GetMaxBrightness)
            echo $(dbus-send --type=method_call --system --print-reply=literal \
                --dest='org.freedesktop.UPower' \
                '/org/freedesktop/UPower/KbdBacklight' \
                "org.freedesktop.UPower.KbdBacklight.${method}")
            ;;
        SetBrightness)
            local value="$2"
            dbus-send --type=method_call --system --print-reply=literal \
                --dest='org.freedesktop.UPower' \
                '/org/freedesktop/UPower/KbdBacklight' \
                "org.freedesktop.UPower.KbdBacklight.${method}" \
                "int32:${value}"
            ;;
    esac
}

min() {
    echo "if ($1 < $2) $1 else $2" | bc
}

max() {
    echo "if ($1 > $2) $1 else $2" | bc
}

clamp() {
    echo $(min $(max $1 $2) $3)
}

# Generates a progress bar for the provided value.
#
# Arguments:
#   Percentage      (integer) Percentage of progress.
#   Maximum         (integer) Maximum percentage. (default: 100)
#   Divisor         (integer) For calculating the ratio of blocks to progress (default: 5)
#
# Returns:
#   The progress bar.
get_progress_bar() {
    local percent="$1"
    local max_percent=${2:-100}
    local divisor=${3:-5}
    local progress=$((($percent > $max_percent ? $max_percent : $percent) / $divisor))

    printf 'â–ˆ%.0s' $(eval echo "{1..$progress}")
}

notify_brightness() {
    local max=$(get_max_brightness)
    local brightness=$(get_brightness)
    local percent=$(echo "scale=1; $brightness / $max * 100" | bc -l)
    local text="Brightness: ${percent} percent"

    if $opt_show_volume_progress; then
        local progress=$(get_progress_bar "$percent")
        text="$text $progress"
    fi

    if $opt_use_dunstify; then
        dunstify -i "keyboard-brightness" -t $expires -h int:value:"$percent" -h string:synchronous:brightness "$text" -r 1000
    else
        notify-send -i "keyboard-brightness" -t $expires -h int:value:"$percent" -h string:synchronous:brightness "$text"
    fi
}

usage() {
    echo "Usage: $0 [options]
Control keyboard backlight brightness.

Options:
  -d <amount>       decrease brightness
  -i <amount>       increase brightness
  -e <expires>      expiration time of notifications, in milliseconds
  -n                show notifications
  -p                show a text progress bar
  -h                display this help and exit
" 1>&2
    exit 1
}

###########################################################

opt_show_volume_progress=false
opt_notification=false
opt_use_dunstify=false
expires="1500"

while getopts "d:i:nh" o; do
    case "$o" in
        d) decrease_brightness $OPTARG ;;
        i) increase_brightness $OPTARG ;;
        e) expires=$OPTARG ;;
        n) opt_notification=true ;;
        p) opt_show_volume_progress=true ;;
        h | *) usage ;;
    esac
done
shift $((OPTIND-1)) # Shift off options and optional --

if $opt_notification; then
    notify_brightness
fi
